generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DIRECT_URL")      // Pooler for runtime queries (port 6543)
  directUrl = env("DATABASE_URL")    // Direct for migrations (port 5432)
}

model Session {
  id            String         @id @default(cuid())
  shop          String         @unique
  state         String
  isOnline      Boolean        @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean        @default(false)
  locale        String?
  collaborator  Boolean?       @default(false)
  emailVerified Boolean?       @default(false)
  merchantId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ProductDraft  ProductDraft[]
  merchant      Merchant       @relation(fields: [merchantId], references: [id])

  @@index([shop])
  @@index([merchantId])
}

model Merchant {
  id                  String                    @id @default(cuid())
  shopDomain          String                    @unique
  name                String
  email               String?
  phone               String?
  address             String?
  timezone            String?
  currency            String                    @default("USD")
  plan                String                    @default("basic")
  status              String                    @default("active")
  settings            Json                      @default("{}")
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  accessToken         String?
  scope               String?
  auditLogging        Boolean                   @default(true)
  dataEncryption      Boolean                   @default(true)
  webhookSecret       String?
  aiSettings          AISettings?
  imageReviewSessions ImageReviewSession[]
  refinementConfig    MerchantRefinementConfig?
  productDrafts       ProductDraft[]
  purchaseOrders      PurchaseOrder[]
  sessions            Session[]
  suppliers           Supplier[]
  uploads             Upload[]
  workflows           WorkflowExecution[]

  @@index([shopDomain])
  @@index([status])
}

model PurchaseOrder {
  id                  String               @id @default(cuid())
  supplierName        String
  orderDate           DateTime?
  dueDate             DateTime?
  totalAmount         Float
  currency            String               @default("USD")
  status              String               @default("pending")
  confidence          Float                @default(0.0)
  rawData             Json?
  processingNotes     String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  merchantId          String
  supplierId          String?
  fileName            String?
  fileSize            Int?
  number              String
  analysisJobId       String?
  fileUrl             String?
  jobCompletedAt      DateTime?
  jobError            String?
  jobStartedAt        DateTime?
  jobStatus           String               @default("pending")
  syncJobId           String?
  syncCompletedAt     DateTime?
  syncResults         Json?
  syncStartedAt       DateTime?
  totalProcessingTime Int?
  aiAuditTrail        AIProcessingAudit[]
  imageReviewSessions ImageReviewSession[]
  lineItems           POLineItem[]
  productDrafts       ProductDraft[]
  merchant            Merchant             @relation(fields: [merchantId], references: [id])
  supplier            Supplier?            @relation(fields: [supplierId], references: [id])
  syncAudits          ShopifySyncAudit[]
  syncJobs            SyncJob[]

  @@unique([merchantId, number])
  @@index([merchantId])
  @@index([supplierId])
  @@index([status])
  @@index([number])
  @@index([analysisJobId])
  @@index([syncJobId])
  @@index([jobStatus])
}

model POLineItem {
  id               String        @id @default(cuid())
  sku              String
  productName      String
  description      String?
  quantity         Int
  confidence       Float         @default(0.0)
  status           String        @default("pending")
  shopifyProductId String?
  shopifyVariantId String?
  purchaseOrderId  String
  aiNotes          String?
  createdAt        DateTime      @default(now())
  totalCost        Float
  unitCost         Float
  updatedAt        DateTime      @updatedAt
  shopifySync      String?
  shopifySyncAt    DateTime?
  syncError        String?
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  ProductDraft     ProductDraft?

  @@index([purchaseOrderId])
  @@index([sku])
  @@index([status])
}

model Supplier {
  id                String          @id @default(cuid())
  name              String
  contactEmail      String?
  contactPhone      String?
  address           String?
  website           String?
  status            String          @default("active")
  connectionConfig  Json            @default("{}")
  syncEnabled       Boolean         @default(false)
  syncFrequency     String?
  lastSync          DateTime?
  nextSync          DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  merchantId        String
  averageAccuracy   Float?
  avgProcessingTime Int?
  category          String?
  connectionType    String          @default("manual")
  priority          String          @default("medium")
  syncTime          String?
  totalPOs          Int             @default(0)
  categories        String[]        @default([])
  productDrafts     ProductDraft[]
  purchaseOrders    PurchaseOrder[]
  merchant          Merchant        @relation(fields: [merchantId], references: [id])
  uploads           Upload[]

  @@unique([merchantId, name])
  @@index([merchantId])
  @@index([status])
  @@index([name])
}

model AISettings {
  id                    String   @id @default(cuid())
  confidenceThreshold   Float    @default(0.8)
  autoApproveHigh       Boolean  @default(false)
  strictMatching        Boolean  @default(true)
  learningMode          Boolean  @default(true)
  enableOCR             Boolean  @default(true)
  enableNLP             Boolean  @default(true)
  enableAutoMapping     Boolean  @default(true)
  primaryModel          String   @default("gpt-5-nano")
  fallbackModel         String   @default("gpt-4o-mini")
  maxRetries            Int      @default(3)
  customRules           Json     @default("[]")
  fieldMappings         Json     @default("{}")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  merchantId            String   @unique
  autoMatchSuppliers    Boolean  @default(true)
  notifyOnErrors        Boolean  @default(true)
  notifyOnLowConfidence Boolean  @default(true)
  notifyOnNewSuppliers  Boolean  @default(true)
  preferredVendors      String[] @default([])
  pricingRules          Json     @default("{}")
  merchant              Merchant @relation(fields: [merchantId], references: [id])

  @@index([merchantId])
}

model AIProcessingAudit {
  id                  String        @id @default(cuid())
  model               String
  tokenCount          Int
  processingTime      Int
  confidence          Float
  processingMethod    String
  inputType           String
  inputSize           Int?
  fileName            String?
  documentType        String?
  industry            String?
  extractedFields     Json
  confidenceBreakdown Json
  dataQuality         String?
  status              String
  errorMessage        String?
  warningMessages     String[]      @default([])
  createdAt           DateTime      @default(now())
  purchaseOrderId     String
  purchaseOrder       PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@index([purchaseOrderId])
  @@index([model])
  @@index([status])
  @@index([createdAt])
}

model SyncJob {
  id              String        @id @default(cuid())
  type            String
  status          String        @default("queued")
  priority        String        @default("normal")
  queuedAt        DateTime      @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  retryCount      Int           @default(0)
  maxRetries      Int           @default(3)
  lastFailedAt    DateTime?
  results         Json?
  errorMessage    String?
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([queuedAt])
  @@index([purchaseOrderId])
}

model ShopifySyncAudit {
  id              String        @id @default(cuid())
  syncStartTime   DateTime
  syncEndTime     DateTime
  processingTime  Int
  success         Boolean
  itemsProcessed  Int
  itemsCreated    Int
  itemsUpdated    Int
  itemsErrored    Int
  syncResults     Json
  errorMessage    String?
  createdAt       DateTime      @default(now())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@index([purchaseOrderId])
  @@index([success])
  @@index([syncStartTime])
  @@index([createdAt])
}

model Upload {
  id               String    @id @default(cuid())
  fileName         String
  originalFileName String
  fileSize         Int
  mimeType         String
  fileUrl          String?
  status           String    @default("uploaded")
  errorMessage     String?
  workflowId       String?
  merchantId       String
  supplierId       String?
  metadata         Json      @default("{}")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  merchant         Merchant  @relation(fields: [merchantId], references: [id])
  supplier         Supplier? @relation(fields: [supplierId], references: [id])

  @@index([merchantId])
  @@index([workflowId])
  @@index([status])
  @@index([createdAt])
}

model WorkflowExecution {
  id              String                   @id @default(cuid())
  workflowId      String                   @unique
  type            String                   @default("purchase_order_processing")
  status          String                   @default("pending")
  currentStage    String?
  startedAt       DateTime                 @default(now())
  completedAt     DateTime?
  totalDuration   Int?
  stagesCompleted Int                      @default(0)
  stagesTotal     Int                      @default(4)
  progressPercent Int                      @default(0)
  inputData       Json
  stageResults    Json                     @default("{}")
  errorMessage    String?
  failedStage     String?
  retryCount      Int                      @default(0)
  merchantId      String
  uploadId        String?
  purchaseOrderId String?
  metadata        Json                     @default("{}")
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  merchant        Merchant                 @relation(fields: [merchantId], references: [id])
  stages          WorkflowStageExecution[]

  @@index([workflowId])
  @@index([merchantId])
  @@index([status])
  @@index([currentStage])
  @@index([startedAt])
}

model WorkflowStageExecution {
  id           String            @id @default(cuid())
  workflowId   String
  stageName    String
  stageOrder   Int
  status       String            @default("pending")
  startedAt    DateTime?
  completedAt  DateTime?
  duration     Int?
  progress     Int               @default(0)
  result       Json?
  errorMessage String?
  jobId        String?
  retryCount   Int               @default(0)
  metadata     Json              @default("{}")
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  workflow     WorkflowExecution @relation(fields: [workflowId], references: [workflowId], onDelete: Cascade)

  @@unique([workflowId, stageName])
  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
}

model ProductDraft {
  id                  String                 @id @default(cuid())
  sessionId           String
  merchantId          String
  purchaseOrderId     String
  lineItemId          String                 @unique
  supplierId          String?
  originalTitle       String
  refinedTitle        String?
  originalDescription String?
  refinedDescription  String?
  originalPrice       Float
  priceRefined        Float?
  estimatedMargin     Float?
  shopifyProductId    String?
  shopifyVariantId    String?
  status              ProductDraftStatus     @default(DRAFT)
  tags                String[]               @default([])
  categoryId          String?
  reviewNotes         String?
  reviewedBy          String?
  reviewedAt          DateTime?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  compareAtPrice      Float?
  costPerItem         Float?
  countryOfOrigin     String?
  hsCode              String?
  inventoryQty        Int?                   @default(0)
  productType         String?
  sku                 String?
  vendor              String?
  ProductCategory     ProductCategory?       @relation(fields: [categoryId], references: [id])
  POLineItem          POLineItem             @relation(fields: [lineItemId], references: [id], onDelete: Cascade)
  merchant            Merchant               @relation(fields: [merchantId], references: [id])
  purchaseOrder       PurchaseOrder          @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  Session             Session                @relation(fields: [sessionId], references: [id])
  supplier            Supplier?              @relation(fields: [supplierId], references: [id])
  images              ProductImage[]
  reviewHistory       ProductReviewHistory[]
  variants            ProductVariant[]

  @@index([merchantId])
  @@index([status])
  @@index([createdAt])
  @@index([sessionId])
  @@index([supplierId])
}

model ProductImage {
  id              String       @id @default(cuid())
  productDraftId  String
  originalUrl     String
  enhancedUrl     String?
  altText         String?
  position        Int          @default(0)
  isEnhanced      Boolean      @default(false)
  enhancementData Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  productDraft    ProductDraft @relation(fields: [productDraftId], references: [id], onDelete: Cascade)

  @@index([productDraftId])
  @@index([position])
}

model ProductVariant {
  id               String       @id @default(cuid())
  productDraftId   String
  sku              String
  title            String
  price            Float
  compareAtPrice   Float?
  inventoryQty     Int?
  weight           Float?
  weightUnit       String       @default("kg")
  requiresShipping Boolean      @default(true)
  taxable          Boolean      @default(true)
  barcode          String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  productDraft     ProductDraft @relation(fields: [productDraftId], references: [id], onDelete: Cascade)

  @@unique([productDraftId, sku])
  @@index([productDraftId])
  @@index([sku])
}

model ProductCategory {
  id           String            @id @default(cuid())
  name         String            @unique
  description  String?
  parentId     String?
  isActive     Boolean           @default(true)
  sortOrder    Int               @default(0)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  parent       ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     ProductCategory[] @relation("CategoryHierarchy")
  ProductDraft ProductDraft[]

  @@index([parentId])
  @@index([sortOrder])
}

model ProductReviewHistory {
  id             String       @id @default(cuid())
  productDraftId String
  action         String
  changes        Json
  reviewedBy     String?
  reviewNotes    String?
  createdAt      DateTime     @default(now())
  productDraft   ProductDraft @relation(fields: [productDraftId], references: [id], onDelete: Cascade)

  @@index([productDraftId])
  @@index([action])
  @@index([createdAt])
}

model ImageReviewSession {
  id               String               @id @default(cuid())
  sessionId        String               @unique
  purchaseOrderId  String
  merchantId       String
  status           ImageReviewStatus    @default(PENDING)
  totalProducts    Int                  @default(0)
  reviewedProducts Int                  @default(0)
  autoApproveAt    DateTime?
  completedAt      DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  products         ImageReviewProduct[]
  merchant         Merchant             @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  purchaseOrder    PurchaseOrder        @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@index([purchaseOrderId])
  @@index([merchantId])
  @@index([status])
  @@index([createdAt])
}

model ImageReviewProduct {
  id                  String                    @id @default(cuid())
  sessionId           String
  productName         String
  productSku          String?
  barcode             String?
  originalProductData Json
  selectedImageIds    String[]                  @default([])
  status              ProductImageReviewStatus  @default(PENDING)
  reviewNotes         String?
  reviewedAt          DateTime?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  session             ImageReviewSession        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  images              ImageReviewProductImage[]

  @@index([sessionId])
  @@index([status])
  @@index([productSku])
}

model ImageReviewProductImage {
  id              String             @id @default(cuid())
  productReviewId String
  imageUrl        String
  imageType       ImageType
  source          ImageSource
  altText         String?
  isSelected      Boolean            @default(false)
  isApproved      Boolean            @default(false)
  rejectionReason String?
  metadata        Json               @default("{}")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  product         ImageReviewProduct @relation(fields: [productReviewId], references: [id], onDelete: Cascade)

  @@index([productReviewId])
  @@index([imageType])
  @@index([source])
  @@index([isSelected])
}

model MerchantRefinementConfig {
  id                     String              @id @default(cuid())
  merchantId             String              @unique
  shopDomain             String
  configVersion          String              @default("1.0")
  isEnabled              Boolean             @default(true)
  autoApplyRules         Boolean             @default(false)
  requireReviewThreshold Float               @default(0.8)
  pricingConfig          Json
  categorizationConfig   Json
  contentConfig          Json
  deduplicationConfig    Json
  processingConfig       Json
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  categoryMappings       CategoryMapping[]
  contentRules           ContentRule[]
  deduplicationRules     DeduplicationRule[]
  merchant               Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  pricingRules           PricingRule[]

  @@index([merchantId])
  @@index([shopDomain])
}

model CategoryMapping {
  id                 String                   @id @default(cuid())
  merchantId         String
  configId           String
  sourceCategory     String
  sourcePattern      String?
  priority           Int                      @default(0)
  targetCollection   String
  targetCollectionId String?
  isEnabled          Boolean                  @default(true)
  matchCount         Int                      @default(0)
  lastUsed           DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  config             MerchantRefinementConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([configId])
  @@index([sourceCategory])
  @@index([priority])
}

model PricingRule {
  id               String                   @id @default(cuid())
  merchantId       String
  configId         String
  name             String
  description      String?
  ruleType         PricingRuleType
  priority         Int                      @default(0)
  conditions       Json
  markupType       MarkupType               @default(PERCENTAGE)
  markupValue      Float
  roundingRule     RoundingRule             @default(NONE)
  minPrice         Float?
  maxPrice         Float?
  sourceCurrency   String                   @default("USD")
  targetCurrency   String                   @default("USD")
  exchangeRate     Float?
  isEnabled        Boolean                  @default(true)
  applicationCount Int                      @default(0)
  lastUsed         DateTime?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  config           MerchantRefinementConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([configId])
  @@index([priority])
  @@index([ruleType])
}

model ContentRule {
  id                String                   @id @default(cuid())
  merchantId        String
  configId          String
  name              String
  description       String?
  ruleType          ContentRuleType
  priority          Int                      @default(0)
  conditions        Json
  contentTemplate   String?
  brandVoicePrompt  String?
  seoKeywords       String[]                 @default([])
  imageProcessing   Json?
  fallbackImageUrls String[]                 @default([])
  isEnabled         Boolean                  @default(true)
  applicationCount  Int                      @default(0)
  lastUsed          DateTime?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  config            MerchantRefinementConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([configId])
  @@index([priority])
  @@index([ruleType])
}

model DeduplicationRule {
  id                String                   @id @default(cuid())
  merchantId        String
  configId          String
  name              String
  description       String?
  priority          Int                      @default(0)
  matchFields       String[]
  matchThreshold    Float                    @default(0.9)
  matchAlgorithm    MatchAlgorithm           @default(EXACT)
  onDuplicateAction DuplicateAction          @default(SKIP)
  updateExisting    Boolean                  @default(false)
  mergeBehavior     Json?
  isEnabled         Boolean                  @default(true)
  matchCount        Int                      @default(0)
  lastUsed          DateTime?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  config            MerchantRefinementConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([configId])
  @@index([priority])
}

model SupplierMetrics {
  id                 String   @id @default(cuid())
  supplierId         String   @unique
  averageAccuracy    Float    @default(0.0)
  dataQualityScore   Float    @default(0.0)
  errorRate          Float    @default(0.0)
  avgProcessingTime  Int      @default(0)
  onTimeDeliveryRate Float    @default(0.0)
  totalPOs           Int      @default(0)
  totalValue         Float    @default(0.0)
  recentPOs7Days     Int      @default(0)
  recentPOs30Days    Int      @default(0)
  activityTrend      String   @default("stable")
  completedCount     Int      @default(0)
  processingCount    Int      @default(0)
  failedCount        Int      @default(0)
  needsReviewCount   Int      @default(0)
  healthScore        Float    @default(100.0)
  lastHealthCheck    DateTime @default(now())
  calculatedAt       DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([supplierId])
  @@index([healthScore])
  @@index([calculatedAt])
}

enum ImageReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  AUTO_APPROVED
  CANCELLED
}

enum ProductImageReviewStatus {
  PENDING
  APPROVED
  NEEDS_CHANGES
  SKIPPED
}

enum ImageType {
  MAIN
  GALLERY
  VARIANT
  THUMBNAIL
}

enum ImageSource {
  VENDOR_PROVIDED
  WEB_SCRAPED
  AI_GENERATED
  STOCK_PHOTO
  MERCHANT_UPLOAD
  PLACEHOLDER
}

enum ProductDraftStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  SYNCING
  SYNCED
  FAILED
}

enum PricingRuleType {
  GLOBAL
  CATEGORY
  SUPPLIER
  SKU_PATTERN
  PRICE_RANGE
  CONDITIONAL
}

enum MarkupType {
  PERCENTAGE
  FIXED_AMOUNT
  MARGIN_BASED
  CUSTOM_FORMULA
}

enum RoundingRule {
  NONE
  NEAREST_CENT
  NEAREST_NICKEL
  NEAREST_DIME
  NEAREST_QUARTER
  NEAREST_HALF
  NEAREST_DOLLAR
  PSYCHOLOGICAL_99
  PSYCHOLOGICAL_95
}

enum ContentRuleType {
  SEO_DESCRIPTION
  BRAND_VOICE
  TITLE_OPTIMIZATION
  IMAGE_ENHANCEMENT
  TAG_GENERATION
  METADATA_ENRICHMENT
}

enum MatchAlgorithm {
  EXACT
  FUZZY
  SEMANTIC
  REGEX_PATTERN
  CUSTOM
}

enum DuplicateAction {
  SKIP
  CREATE_VARIANT
  UPDATE_EXISTING
  CREATE_ANYWAY
  QUEUE_FOR_REVIEW
}
