// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Using Supabase Session Pooler (IPv4 compatible, recommended for Remix apps)
  // Format: postgresql://postgres.PROJECT_ID:PASSWORD@aws-1-ca-central-1.pooler.supabase.com:5432/postgres
}

model Session {
  id            String    @id @default(cuid())
  shop          String    @unique
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Merchant relationship for proper isolation
  merchantId    String
  merchant      Merchant  @relation(fields: [merchantId], references: [id])
  
  @@index([shop])
  @@index([merchantId])
}

model Merchant {
  id            String   @id @default(cuid())
  shopDomain    String   @unique
  name          String
  email         String?
  phone         String?
  address       String?
  timezone      String?
  currency      String   @default("USD")
  plan          String   @default("basic")
  status        String   @default("active") // active, suspended, cancelled
  settings      Json     @default("{}")
  
  // Shopify connection details
  accessToken   String?  // Shopify access token
  scope         String?  // Shopify API scope
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  sessions       Session[]
  purchaseOrders PurchaseOrder[]
  suppliers      Supplier[]
  aiSettings     AISettings?
  uploads        Upload[]
  workflows      WorkflowExecution[]
  
  @@index([shopDomain])
  @@index([status])
}

model PurchaseOrder {
  id                String      @id @default(cuid())
  number            String      // PO number from document
  supplierName      String      // Supplier name as appears on PO
  orderDate         DateTime?
  dueDate           DateTime?
  totalAmount       Float
  currency          String      @default("USD")
  status            String      @default("pending") // pending, processing, completed, failed, review_needed, syncing, synced, sync_error
  confidence        Float       @default(0.0)      // AI processing confidence (0-1)
  rawData           Json?       // Original parsed data from document
  processingNotes   String?     // AI processing notes
  fileName          String?     // Original uploaded file name
  fileSize          Int?        // File size in bytes
  fileUrl           String?     // URL/path to stored file in Supabase Storage
  
  // Shopify sync tracking
  syncStartedAt     DateTime?   // When Shopify sync started
  syncCompletedAt   DateTime?   // When Shopify sync completed
  syncResults       Json?       // Detailed sync results
  totalProcessingTime Int?      // Total processing time including sync
  
  // Job tracking fields for async processing
  analysisJobId     String?     // Redis job ID for PO analysis processing
  syncJobId         String?     // Redis job ID for Shopify sync operations
  jobStatus         String      @default("pending") // pending, processing, completed, failed
  jobStartedAt      DateTime?   // Timestamp when job processing started
  jobCompletedAt    DateTime?   // Timestamp when job processing completed
  jobError          String?     // Error message if job failed
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Merchant relationship for RLS
  merchantId        String
  merchant          Merchant    @relation(fields: [merchantId], references: [id])
  
  // Supplier relationship (optional - may not match existing supplier)
  supplierId        String?
  supplier          Supplier?   @relation(fields: [supplierId], references: [id])
  
  // Line items and AI audit trail
  lineItems         POLineItem[]
  aiAuditTrail      AIProcessingAudit[]
  syncJobs          SyncJob[]
  syncAudits        ShopifySyncAudit[]
  
  @@index([merchantId])
  @@index([supplierId])
  @@index([status])
  @@index([number])
  @@index([analysisJobId])
  @@index([syncJobId])
  @@index([jobStatus])
  @@unique([merchantId, number]) // Ensure unique PO numbers per merchant
}

model POLineItem {
  id                String        @id @default(cuid())
  sku               String        // Product SKU
  productName       String        // Product name from PO
  description       String?       // Additional description
  quantity          Int           // Quantity ordered
  unitCost          Float         // Unit cost from PO
  totalCost         Float         // Total line cost (quantity * unitCost)
  confidence        Float         @default(0.0) // AI confidence for this line item
  status            String        @default("pending") // pending, matched, new, updated, error, review_needed
  
  // Shopify integration fields
  shopifyProductId  String?       // Matched Shopify product ID
  shopifyVariantId  String?       // Matched Shopify variant ID
  shopifySync       String?       // created, updated, error, pending
  shopifySyncAt     DateTime?     // Last sync timestamp
  syncError         String?       // Sync error message if any
  
  // Processing metadata
  aiNotes           String?       // AI processing notes for this item
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Purchase Order relationship
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  @@index([purchaseOrderId])
  @@index([sku])
  @@index([status])
}

model Supplier {
  id                String   @id @default(cuid())
  name              String
  contactEmail      String?
  contactPhone      String?
  address           String?
  website           String?
  
  // Supplier categorization
  category          String?  // electronics, clothing, etc.
  priority          String   @default("medium") // low, medium, high, critical
  
  // Connection settings for automation
  connectionType    String   @default("manual") // manual, api, email, ftp
  connectionConfig  Json     @default("{}") // API endpoints, auth settings, etc.
  status            String   @default("active") // active, inactive, error
  
  // Sync settings
  syncEnabled       Boolean  @default(false)
  syncFrequency     String?  // every_15min, hourly, daily, weekly
  syncTime          String?  // Time of day for scheduled syncs
  lastSync          DateTime?
  nextSync          DateTime?
  
  // Performance metrics
  totalPOs          Int      @default(0)
  averageAccuracy   Float?   // Average AI processing accuracy for this supplier
  avgProcessingTime Int?     // Average processing time in seconds
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Merchant relationship for RLS
  merchantId        String
  merchant          Merchant @relation(fields: [merchantId], references: [id])
  
  // Purchase orders from this supplier
  purchaseOrders    PurchaseOrder[]
  uploads           Upload[]
  
  @@index([merchantId])
  @@index([status])
  @@index([name])
  @@unique([merchantId, name]) // Ensure unique supplier names per merchant
}

model AISettings {
  id                    String   @id @default(cuid())
  
  // AI Processing Settings
  confidenceThreshold   Float    @default(0.8)        // Minimum confidence to auto-approve
  autoApproveHigh       Boolean  @default(false)      // Auto-approve high confidence items
  strictMatching        Boolean  @default(true)       // Strict product matching
  learningMode          Boolean  @default(true)       // Enable learning from corrections
  
  // Supplier Automation
  autoMatchSuppliers    Boolean  @default(true)       // Auto-match to existing suppliers
  preferredVendors      String[] @default([])         // Preferred supplier names
  
  // AI Model Configuration
  primaryModel          String   @default("gpt-5-nano")       // Latest nano model for efficiency
  fallbackModel         String   @default("gpt-4o-mini")      // Proven fallback model
  maxRetries            Int      @default(3)                  // Max retry attempts
  
  // Processing Features
  enableOCR             Boolean  @default(true)       // Enable OCR for images/PDFs
  enableNLP             Boolean  @default(true)       // Enable natural language processing
  enableAutoMapping     Boolean  @default(true)       // Enable automatic field mapping
  
  // Custom Rules & Mappings
  customRules           Json     @default("[]")       // Custom processing rules
  fieldMappings         Json     @default("{}")       // Custom field mappings
  pricingRules          Json     @default("{}")       // Pricing adjustment rules
  
  // Notification Preferences
  notifyOnErrors        Boolean  @default(true)       // Notify on processing errors
  notifyOnLowConfidence Boolean  @default(true)       // Notify on low confidence items
  notifyOnNewSuppliers  Boolean  @default(true)       // Notify on new suppliers detected
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // One-to-one relationship with Merchant
  merchantId            String   @unique
  merchant              Merchant @relation(fields: [merchantId], references: [id])
  
  @@index([merchantId])
}

model AIProcessingAudit {
  id                    String   @id @default(cuid())
  
  // Processing metadata
  model                 String                  // AI model used (gpt-5-nano, gpt-4o-mini)
  tokenCount            Int                     // Total tokens used
  processingTime        Int                     // Processing time in milliseconds
  confidence            Float                   // Overall confidence score (0-1)
  processingMethod      String                  // Method used (text-gpt5, text-gpt4-mini-fallback, etc.)
  
  // Input data
  inputType             String                  // text, pdf, image
  inputSize             Int?                    // Input size in bytes/characters
  fileName              String?                 // Original file name
  
  // Results data
  documentType          String?                 // purchase_order, invoice, etc.
  industry              String?                 // retail, manufacturing, etc.
  extractedFields       Json                    // Fields extracted by AI
  confidenceBreakdown   Json                    // Confidence scores per field
  dataQuality           String?                 // excellent, good, fair, poor
  
  // Processing status
  status                String                  // success, failure, partial
  errorMessage          String?                 // Error message if failed
  warningMessages       String[]  @default([]) // Warning messages
  
  // Audit trail
  createdAt             DateTime @default(now())
  
  // Relationships
  purchaseOrderId       String
  purchaseOrder         PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  @@index([purchaseOrderId])
  @@index([model])
  @@index([status])
  @@index([createdAt])
}

model SyncJob {
  id                String   @id @default(cuid())
  
  // Job details
  type              String                  // shopify_sync, inventory_update, etc.
  status            String   @default("queued") // queued, processing, completed, failed
  priority          String   @default("normal") // low, normal, high, critical
  
  // Timing
  queuedAt          DateTime @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  
  // Retry logic
  retryCount        Int      @default(0)
  maxRetries        Int      @default(3)
  lastFailedAt      DateTime?
  
  // Results
  results           Json?
  errorMessage      String?
  
  // Relationships
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([queuedAt])
  @@index([purchaseOrderId])
}

model ShopifySyncAudit {
  id                String   @id @default(cuid())
  
  // Sync session details
  syncStartTime     DateTime
  syncEndTime       DateTime
  processingTime    Int                     // Total processing time in milliseconds
  
  // Results summary
  success           Boolean
  itemsProcessed    Int
  itemsCreated      Int
  itemsUpdated      Int
  itemsErrored      Int
  
  // Detailed results
  syncResults       Json                    // Full sync results with item details
  errorMessage      String?                 // Error message if sync failed
  
  // Audit trail
  createdAt         DateTime @default(now())
  
  // Relationships
  purchaseOrderId   String
  purchaseOrder     PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  @@index([purchaseOrderId])
  @@index([success])
  @@index([syncStartTime])
  @@index([createdAt])
}

model Upload {
  id                String   @id @default(cuid())
  
  // File details
  fileName          String
  originalFileName  String
  fileSize          Int
  mimeType          String
  fileUrl           String?  // Storage URL/path
  
  // Processing status
  status            String   @default("uploaded") // uploaded, parsing, parsed, processing, completed, failed
  errorMessage      String?
  
  // Workflow tracking
  workflowId        String?  // Reference to workflow in Redis
  
  // Upload context
  merchantId        String
  supplierId        String?
  
  // Metadata
  metadata          Json     @default("{}")
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  merchant          Merchant @relation(fields: [merchantId], references: [id])
  supplier          Supplier? @relation(fields: [supplierId], references: [id])
  
  @@index([merchantId])
  @@index([workflowId])
  @@index([status])
  @@index([createdAt])
}

model WorkflowExecution {
  id                String   @id @default(cuid())
  
  // Workflow identification
  workflowId        String   @unique // Redis workflow ID
  type              String   @default("purchase_order_processing") // Workflow type
  
  // Current status
  status            String   @default("pending") // pending, running, completed, failed, cancelled
  currentStage      String?  // Current stage being processed
  
  // Timing
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  totalDuration     Int?     // Total duration in milliseconds
  
  // Progress tracking
  stagesCompleted   Int      @default(0)
  stagesTotal       Int      @default(4) // AI, DB, Shopify, Status
  progressPercent   Int      @default(0)
  
  // Input data
  inputData         Json     // Original workflow input
  
  // Stage results
  stageResults      Json     @default("{}") // Results from each stage
  
  // Error handling
  errorMessage      String?
  failedStage       String?
  retryCount        Int      @default(0)
  
  // Context
  merchantId        String
  uploadId          String?
  purchaseOrderId   String?
  
  // Metadata
  metadata          Json     @default("{}")
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  merchant          Merchant @relation(fields: [merchantId], references: [id])
  stages            WorkflowStageExecution[]
  
  @@index([workflowId])
  @@index([merchantId])
  @@index([status])
  @@index([currentStage])
  @@index([startedAt])
}

model WorkflowStageExecution {
  id                String   @id @default(cuid())
  
  // Stage identification
  workflowId        String   // References WorkflowExecution.workflowId
  stageName         String   // ai_parsing, database_save, shopify_sync, status_update
  stageOrder        Int      // 1, 2, 3, 4...
  
  // Status
  status            String   @default("pending") // pending, running, completed, failed, skipped
  
  // Timing
  startedAt         DateTime?
  completedAt       DateTime?
  duration          Int?     // Duration in milliseconds
  
  // Progress
  progress          Int      @default(0) // 0-100
  
  // Results
  result            Json?    // Stage-specific results
  errorMessage      String?
  
  // Job tracking
  jobId             String?  // Bull queue job ID
  retryCount        Int      @default(0)
  
  // Metadata
  metadata          Json     @default("{}")
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  workflow          WorkflowExecution @relation(fields: [workflowId], references: [workflowId], onDelete: Cascade)
  
  @@unique([workflowId, stageName])
  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
}
